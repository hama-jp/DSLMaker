{
  "app": {
    "description": "Manufacturing Quality Control Enterprise Workflow",
    "icon": "🏭",
    "icon_background": "#1f2937",
    "mode": "workflow",
    "name": "Manufacturing QC Workflow"
  },
  "kind": "app",
  "version": "2.0.0",
  "workflow": {
    "environment_variables": [
      {
        "key": "MAX_RETRIES",
        "name": "Maximum retry attempts",
        "type": "number",
        "default": "3"
      },
      {
        "key": "TIMEOUT_MS",
        "name": "Request timeout milliseconds",
        "type": "number",
        "default": "30000"
      },
      {
        "key": "CACHE_TTL",
        "name": "Cache TTL seconds",
        "type": "number",
        "default": "300"
      },
      {
        "key": "CIRCUIT_BREAKER_THRESHOLD",
        "name": "Circuit breaker threshold",
        "type": "number",
        "default": "5"
      },
      {
        "key": "SCALE_FACTOR",
        "name": "Auto-scaling factor",
        "type": "number",
        "default": "2"
      },
      {
        "key": "IOT_API_KEY",
        "name": "IoT Platform API Key",
        "type": "string",
        "default": ""
      },
      {
        "key": "ERP_API_TOKEN",
        "name": "ERP System Token",
        "type": "string",
        "default": ""
      }
    ],
    "features": {
      "file_upload": {
        "enabled": true,
        "number_limits": 50,
        "max_size_mb": 200
      },
      "retriever_resource": {
        "enabled": true
      }
    },
    "graph": {
      "edges": [
        {
          "source": "start_node",
          "target": "parameter_extractor"
        },
        {
          "source": "parameter_extractor",
          "target": "iot_integration"
        },
        {
          "source": "parameter_extractor",
          "target": "spc_analyzer"
        },
        {
          "source": "parameter_extractor",
          "target": "quality_inspection"
        },
        {
          "source": "parameter_extractor",
          "target": "defect_tracker"
        },
        {
          "source": "parameter_extractor",
          "target": "supplier_quality"
        },
        {
          "source": "parameter_extractor",
          "target": "capa_processor"
        },
        {
          "source": "parameter_extractor",
          "target": "compliance_tracker"
        },
        {
          "source": "parameter_extractor",
          "target": "predictive_maintenance"
        },
        {
          "source": "iot_integration",
          "target": "aggregator_node"
        },
        {
          "source": "spc_analyzer",
          "target": "aggregator_node"
        },
        {
          "source": "quality_inspection",
          "target": "aggregator_node"
        },
        {
          "source": "defect_tracker",
          "target": "aggregator_node"
        },
        {
          "source": "supplier_quality",
          "target": "aggregator_node"
        },
        {
          "source": "capa_processor",
          "target": "aggregator_node"
        },
        {
          "source": "compliance_tracker",
          "target": "aggregator_node"
        },
        {
          "source": "predictive_maintenance",
          "target": "aggregator_node"
        },
        {
          "source": "aggregator_node",
          "target": "error_handler_primary"
        },
        {
          "source": "error_handler_primary",
          "target": "fallback_processor"
        },
        {
          "source": "error_handler_primary",
          "target": "scalability_optimizer"
        },
        {
          "source": "fallback_processor",
          "target": "scalability_optimizer"
        },
        {
          "source": "scalability_optimizer",
          "target": "security_validator"
        },
        {
          "source": "security_validator",
          "target": "error_handler_secondary"
        },
        {
          "source": "error_handler_secondary",
          "target": "final_report_generator"
        },
        {
          "source": "final_report_generator",
          "target": "cache_updater"
        },
        {
          "source": "cache_updater",
          "target": "template_transform"
        },
        {
          "source": "template_transform",
          "target": "end_node"
        }
      ],
      "nodes": [
        {
          "id": "start_node",
          "type": "start",
          "position": {
            "x": 100,
            "y": 300
          },
          "data": {
            "title": "QC Workflow Start",
            "inputs": {
              "production_line_id": {
                "type": "string",
                "required": true
              },
              "batch_id": {
                "type": "string",
                "required": true
              },
              "priority_level": {
                "type": "string",
                "required": false
              },
              "trigger_source": {
                "type": "string",
                "required": false
              }
            }
          }
        },
        {
          "id": "parameter_extractor",
          "type": "parameter-extractor",
          "position": {
            "x": 300,
            "y": 300
          },
          "data": {
            "title": "QC Parameter Extractor",
            "parameters": [
              {
                "name": "line_id",
                "type": "string",
                "required": true
              },
              {
                "name": "batch_id",
                "type": "string",
                "required": true
              },
              {
                "name": "sensor_payload",
                "type": "object",
                "required": true
              },
              {
                "name": "priority",
                "type": "string",
                "required": false
              }
            ],
            "instruction": "Extract QC parameters from start inputs: line {{#start_node.production_line_id#}}, batch {{#start_node.batch_id#}}"
          }
        },
        {
          "id": "iot_integration",
          "type": "http-request",
          "position": {
            "x": 600,
            "y": 100
          },
          "data": {
            "title": "IoT Sensor Integration",
            "method": "GET",
            "url": "https://iot.platform.com/streams/{{#parameter_extractor.line_id#}}",
            "headers": {
              "Authorization": "Bearer {{#env.IOT_API_KEY#}}",
              "Accept": "application/json"
            },
            "timeout": "{{#env.TIMEOUT_MS#}}",
            "retry": {
              "max_attempts": "{{#env.MAX_RETRIES#}}",
              "backoff_strategy": "exponential"
            }
          }
        },
        {
          "id": "spc_analyzer",
          "type": "code",
          "position": {
            "x": 600,
            "y": 200
          },
          "data": {
            "title": "Statistical Process Control Analyzer",
            "code": "import numpy as np\n\ndef main(sensor_data):\n    values = np.array(sensor_data.get('measurements', []))\n    if len(values) == 0:\n        raise Exception('No sensor measurements')\n    mean = float(np.mean(values))\n    std = float(np.std(values))\n    ucl = mean + 3 * std\n    lcl = mean - 3 * std\n    out_of_control = any((values > ucl) | (values < lcl))\n    return {'spc': {'mean': mean, 'std': std, 'UCL': ucl, 'LCL': lcl, 'out_of_control': out_of_control}}\n",
            "outputs": {
              "spc": "object"
            }
          }
        },
        {
          "id": "quality_inspection",
          "type": "llm",
          "position": {
            "x": 600,
            "y": 300
          },
          "data": {
            "title": "Automated Quality Inspection",
            "model": {
              "provider": "openai",
              "name": "gpt-4-turbo",
              "mode": "chat",
              "parameters": {
                "temperature": 0.2,
                "max_tokens": 500
              }
            },
            "prompt_template": [
              {
                "role": "user",
                "text": "Based on sensor payload {{#parameter_extractor.sensor_payload#}} and SPC results {{#spc_analyzer.spc#}}, evaluate if the product meets quality standards and list any observed defects."
              }
            ]
          }
        },
        {
          "id": "defect_tracker",
          "type": "code",
          "position": {
            "x": 600,
            "y": 400
          },
          "data": {
            "title": "Defect Tracking & Logging",
            "code": "import uuid, time\n\ndef main(inspection_result):\n    defects = inspection_result.get('defects', [])\n    records = []\n    for d in defects:\n        record = {\n            'defect_id': str(uuid.uuid4()),\n            'description': d,\n            'timestamp': time.time(),\n            'status': 'open'\n        }\n        records.append(record)\n    return {'defect_records': records, 'defect_count': len(records)}\n",
            "outputs": {
              "defect_records": "object",
              "defect_count": "number"
            }
          }
        },
        {
          "id": "supplier_quality",
          "type": "knowledge-retrieval",
          "position": {
            "x": 600,
            "y": 500
          },
          "data": {
            "title": "Supplier Quality Knowledge Base",
            "dataset_ids": [
              "supplier_quality_kb"
            ],
            "retrieval_mode": "hybrid",
            "top_k": 5,
            "score_threshold": 0.75,
            "query": "Supplier performance for batch {{#parameter_extractor.batch_id#}}"
          }
        },
        {
          "id": "capa_processor",
          "type": "llm",
          "position": {
            "x": 600,
            "y": 600
          },
          "data": {
            "title": "CAPA Recommendation Engine",
            "model": {
              "provider": "openai",
              "name": "gpt-4",
              "mode": "chat",
              "parameters": {
                "temperature": 0.1,
                "max_tokens": 600
              }
            },
            "prompt_template": [
              {
                "role": "user",
                "text": "Given defects {{#defect_tracker.defect_records#}} and supplier data {{#supplier_quality.result#}}, propose corrective and preventive actions."
              }
            ]
          }
        },
        {
          "id": "compliance_tracker",
          "type": "code",
          "position": {
            "x": 600,
            "y": 700
          },
          "data": {
            "title": "ISO 9001 Compliance Tracker",
            "code": "def main(spc, capa, defect_count):\n    compliance = {\n        'spc_within_limits': not spc['out_of_control'],\n        'defect_threshold_met': defect_count < 5,\n        'capa_generated': bool(capa.get('text'))\n    }\n    overall = all(compliance.values())\n    audit = {'timestamp': time.time(), 'compliance': compliance, 'overall_status': overall}\n    return {'compliance': compliance, 'audit': audit}\n",
            "outputs": {
              "compliance": "object",
              "audit": "object"
            }
          }
        },
        {
          "id": "predictive_maintenance",
          "type": "llm",
          "position": {
            "x": 600,
            "y": 800
          },
          "data": {
            "title": "Predictive Maintenance Advisor",
            "model": {
              "provider": "openai",
              "name": "gpt-4-turbo",
              "mode": "chat",
              "parameters": {
                "temperature": 0.2,
                "max_tokens": 400
              }
            },
            "prompt_template": [
              {
                "role": "user",
                "text": "Using SPC trends {{#spc_analyzer.spc#}} and recent defect patterns {{#defect_tracker.defect_records#}}, suggest maintenance actions to prevent future failures."
              }
            ]
          }
        },
        {
          "id": "aggregator_node",
          "type": "variable-aggregator",
          "position": {
            "x": 900,
            "y": 400
          },
          "data": {
            "title": "QC Results Aggregator",
            "variables": [
              {
                "variable": "spc_data",
                "value_selector": [
                  "spc_analyzer",
                  "spc"
                ]
              },
              {
                "variable": "inspection_summary",
                "value_selector": [
                  "quality_inspection",
                  "text"
                ]
              },
              {
                "variable": "defect_summary",
                "value_selector": [
                  "defect_tracker",
                  "defect_count"
                ]
              },
              {
                "variable": "supplier_info",
                "value_selector": [
                  "supplier_quality",
                  "result"
                ]
              },
              {
                "variable": "capa_recommendations",
                "value_selector": [
                  "capa_processor",
                  "text"
                ]
              },
              {
                "variable": "compliance_status",
                "value_selector": [
                  "compliance_tracker",
                  "compliance"
                ]
              },
              {
                "variable": "maintenance_advice",
                "value_selector": [
                  "predictive_maintenance",
                  "text"
                ]
              }
            ],
            "output_type": "object"
          }
        },
        {
          "id": "error_handler_primary",
          "type": "if-else",
          "position": {
            "x": 1150,
            "y": 300
          },
          "data": {
            "title": "Primary Error Handler",
            "conditions": [
              {
                "variable_selector": [
                  "aggregator_node",
                  "spc_data"
                ],
                "comparison_operator": "exists",
                "value": true
              },
              {
                "variable_selector": [
                  "aggregator_node",
                  "compliance_status"
                ],
                "comparison_operator": "exists",
                "value": true
              }
            ],
            "logical_operator": "and"
          }
        },
        {
          "id": "fallback_processor",
          "type": "code",
          "position": {
            "x": 1150,
            "y": 150
          },
          "data": {
            "title": "Fallback Processor",
            "code": "def main():\n    return {'fallback': True, 'message': 'Executed fallback due to primary error'}\n",
            "outputs": {
              "fallback": "boolean",
              "message": "string"
            }
          }
        },
        {
          "id": "scalability_optimizer",
          "type": "code",
          "position": {
            "x": 1350,
            "y": 300
          },
          "data": {
            "title": "Scalability Optimizer",
            "code": "def main(aggregated, fallback=None):\n    perf_score = (aggregated.get('defect_summary', 0) * -10) + (aggregated.get('maintenance_advice', '').count('prevent') * 5)\n    scale_factor = float('{{#env.SCALE_FACTOR#}}')\n    recommendation = 'SCALE_UP' if perf_score < 30 else 'MAINTAIN' if perf_score < 70 else 'SCALE_DOWN'\n    return {'performance_score': perf_score, 'scale_recommendation': recommendation, 'scale_factor': scale_factor}\n",
            "outputs": {
              "performance_score": "number",
              "scale_recommendation": "string",
              "scale_factor": "number"
            }
          }
        },
        {
          "id": "security_validator",
          "type": "code",
          "position": {
            "x": 1550,
            "y": 300
          },
          "data": {
            "title": "Security & Audit Validator",
            "code": "import hashlib, time\n\ndef main(optimizer, audit):\n    checksum = hashlib.sha256(str(optimizer).encode()).hexdigest()\n    security_score = 1.0 if optimizer['scale_recommendation'] != 'SCALE_DOWN' else 0.8\n    audit_record = {'timestamp': time.time(), 'checksum': checksum, 'security_score': security_score}\n    return {'validated': security_score >= 0.9, 'audit_record': audit_record}\n",
            "outputs": {
              "validated": "boolean",
              "audit_record": "object"
            }
          }
        },
        {
          "id": "error_handler_secondary",
          "type": "if-else",
          "position": {
            "x": 1750,
            "y": 300
          },
          "data": {
            "title": "Secondary Error Handler",
            "conditions": [
              {
                "variable_selector": [
                  "security_validator",
                  "validated"
                ],
                "comparison_operator": "is",
                "value": true
              },
              {
                "variable_selector": [
                  "scalability_optimizer",
                  "performance_score"
                ],
                "comparison_operator": "greater than",
                "value": 40
              }
            ],
            "logical_operator": "and"
          }
        },
        {
          "id": "final_report_generator",
          "type": "llm",
          "position": {
            "x": 1950,
            "y": 300
          },
          "data": {
            "title": "Final QC Report Generator",
            "model": {
              "provider": "openai",
              "name": "gpt-4-turbo",
              "mode": "chat",
              "parameters": {
                "temperature": 0.05,
                "max_tokens": 800
              }
            },
            "prompt_template": [
              {
                "role": "user",
                "text": "Create a comprehensive quality control report using aggregated data {{#aggregator_node#}}, scalability insights {{#scalability_optimizer#}}, and security audit {{#security_validator.audit_record#}}."
              }
            ]
          }
        },
        {
          "id": "cache_updater",
          "type": "code",
          "position": {
            "x": 2150,
            "y": 300
          },
          "data": {
            "title": "Cache Updater",
            "code": "def main(report, optimizer):\n    cache_key = f\"qc_report:{report[:10]}\"\n    ttl = int('{{#env.CACHE_TTL#}}')\n    return {'cache_updated': True, 'cache_key': cache_key, 'ttl_seconds': ttl}\n",
            "outputs": {
              "cache_updated": "boolean",
              "cache_key": "string",
              "ttl_seconds": "number"
            }
          }
        },
        {
          "id": "template_transform",
          "type": "template-transform",
          "position": {
            "x": 2350,
            "y": 300
          },
          "data": {
            "title": "QC Output Formatter",
            "template": "🏭 QUALITY CONTROL REPORT\n\n{{#final_report_generator.text#}}\n\n---\nPerformance Score: {{#scalability_optimizer.performance_score#}}\nScaling Recommendation: {{#scalability_optimizer.scale_recommendation#}}\nSecurity Validated: {{#security_validator.validated#}}\nCache Key: {{#cache_updater.cache_key#}}\nTimestamp: {{#current_time#}}",
            "variables": [
              {
                "value_selector": [
                  "final_report_generator",
                  "text"
                ],
                "variable": "report_body"
              },
              {
                "value_selector": [
                  "scalability_optimizer",
                  "performance_score"
                ],
                "variable": "perf_score"
              }
            ]
          }
        },
        {
          "id": "end_node",
          "type": "end",
          "position": {
            "x": 2550,
            "y": 300
          },
          "data": {
            "title": "QC Workflow End",
            "outputs": {
              "qc_report": {
                "type": "string",
                "value": "{{#template_transform.output#}}"
              },
              "audit_log": {
                "type": "object",
                "value": "{{#security_validator.audit_record#}}"
              }
            }
          }
        }
      ],
      "viewport": {
        "x": 0,
        "y": 0,
        "zoom": 0.6
      }
    }
  }
}